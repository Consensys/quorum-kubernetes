---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "goquorum-node.fullname" . }}-hooks-sa
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-install,pre-delete,post-delete"  

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "goquorum-node.fullname" . }}-hooks-role
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-install,pre-delete,post-delete"
rules:
  - apiGroups: [""]
    resources: ["secrets", "configmaps"]
    verbs: ["create", "get", "list", "update", "delete" ]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "goquorum-node.fullname" . }}-hooks-rb
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-install,pre-delete,post-delete"    
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "goquorum-node.fullname" . }}-hooks-role
subjects:
- kind: ServiceAccount
  name: {{ include "goquorum-node.fullname" . }}-hooks-sa
  namespace:  {{ .Release.Namespace }}


---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "goquorum-node.fullname" . }}-pre-install-hook
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": "hook-succeeded"
spec:
  backoffLimit: 1
  completions: 1
  template:
    spec:
      serviceAccountName: {{ include "goquorum-node.fullname" . }}-hooks-sa
      restartPolicy: "OnFailure"
      containers:
      - name: {{ template "goquorum-node.fullname" . }}-quorum-pre-start-hook
        image: "{{ .Values.image.hooks.repository }}:{{ .Values.image.hooks.tag }}"
        imagePullPolicy: {{ .Values.image.hooks.pullPolicy }}
        securityContext:
          runAsUser: 0
        command:
          - /bin/bash
          - -c
        args:
          - |

            function update_enodes_configmap {
              kubectl -n {{ .Release.Namespace }} get configmap goquorum-node-enodes -o json
              if [ $? -ne 0 ]; then
                  echo "[]" > /tmp/static-nodes.json.raw
              fi
              # update the entries
              echo "updating goquorum-node-enodes..."
              pubkey=$(cat /tmp/enode )
              echo $(kubectl -n {{ .Release.Namespace }} get configmap goquorum-node-enodes -o jsonpath='{.data.static-nodes\.json}' ) > /tmp/static-nodes.json.raw
              NEEDLE="enode://$pubkey@{{ template "goquorum-node.fullname" . }}-0.{{ template "goquorum-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:30303?discport=0"
              cat /tmp/static-nodes.json.raw | jq --arg NEEDLE "$NEEDLE" '. += [ $NEEDLE ] | unique ' > /tmp/static-nodes.json
              kubectl -n {{ .Release.Namespace }} create configmap goquorum-node-enodes --from-file=static-nodes.json=/tmp/static-nodes.json -o yaml --dry-run=client | kubectl replace -f -
            }

            echo "{{ template "goquorum-node.fullname" . }} Pre Install hook ..."

          {{- if .Values.nodeFlags.generateKeys }}       
    
            echo "Quorum nodekey generation ..."
            FOLDER_PATH=$(npx --yes --quiet quorum-genesis-tool@latest --validators 0 --members 1 --bootnodes 0 --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")
            echo "Creating {{ template "goquorum-node.fullname" . }} secrets in k8s ..."
            kubectl create secret generic {{ template "goquorum-node.fullname" . }}-keys --namespace {{ .Release.Namespace }} --from-file=nodekey=$FOLDER_PATH/member0/nodekey --from-file=nodekey.pub=$FOLDER_PATH/member0/nodekey.pub --from-file=enode=$FOLDER_PATH/member0/nodekey.pub

            kubectl create secret generic {{ template "goquorum-node.fullname" . }}-account --namespace {{ .Release.Namespace }} --from-file=accountPrivate.key=$FOLDER_PATH/member0/accountPrivateKey --from-file=accountPassword=$FOLDER_PATH/member0/accountPassword --from-file=accountKeystore=$FOLDER_PATH/member0/accountKeystore --from-file=accountAdddress=$FOLDER_PATH/member0/accountAddress

            cat $FOLDER_PATH/member0/nodekey.pub > /tmp/enode
            echo "Creating {{ template "goquorum-node.fullname" . }} configmap address in k8s ..."
            kubectl create configmap {{ template "goquorum-node.fullname" . }}-address --from-file=address=$FOLDER_PATH/${f}/member0/address

            update_enodes_configmap
          {{- end }}       
            
            echo "Quorum Completed"

          {{- if .Values.nodeFlags.privacy }}

            function update_tessera_peers_configmap {
              kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o json
              # first time a tx node is deployed and there is no configmap 
              if [ $? -ne 0 ]; then
                echo "No tessera-peers found, creating a new one..."
                echo "[{ \"url\": \"http://{{ template "goquorum-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:9000\" }]"  > /tmp/tessera-peers 
                kubectl --namespace {{ .Release.Namespace }} create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers 

              # update the entries
              else
                echo "Tessera-peers found, updating existing..."
                echo $(kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o jsonpath='{.data.tesseraPeers}' ) > /tmp/tessera-peers.raw
                NEEDLE="http://{{ template "goquorum-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:9000"
                cat /tmp/tessera-peers.raw | jq --arg NEEDLE "$NEEDLE" '. += [{"url": $NEEDLE}] | unique ' > /tmp/tessera-peers
                kubectl -n {{ .Release.Namespace }} create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers -o yaml --dry-run=client | kubectl replace -f -
              fi
            }

            FOLDER_PATH=$(npx --yes quorum-genesis-tool@latest --validators 0 --members 1 --bootnodes 0 --tesseraEnabled true --tesseraPassword {{ .Values.node.tessera.password }} --outputPath /tmp/tessera | tail -1 | sed -e "s/^Artifacts in folder: //")
            if [ ! -f "$FOLDER_PATH/member0/passwordFile.txt" ]; then
              echo "" > $FOLDER_PATH/member0/passwordFile.txt
            fi
            echo "Creating {{ template "goquorum-node.fullname" . }}-tessera-keys secrets in k8s ..."
            kubectl create secret generic {{ template "goquorum-node.fullname" . }}-tessera-keys --namespace {{ .Release.Namespace }} --from-file=tm.key=$FOLDER_PATH/member0/tessera.key --from-file=tm.pub=$FOLDER_PATH/member0/tessera.pub --from-file=passwordFile.txt=$FOLDER_PATH/member0/passwordFile.txt
            update_tessera_peers_configmap

          {{- end }}
            echo "Completed"


---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "goquorum-node.fullname" . }}-pre-delete-hook
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: "hook-succeeded"
spec:
  backoffLimit: 3
  completions: 1
  template:
    spec:
      serviceAccountName: {{ include "goquorum-node.fullname" . }}-hooks-sa
      restartPolicy: "OnFailure"
      containers:
        - name: {{ template "goquorum-node.fullname" . }}-node-pre-delete-hook
          image: "{{ .Values.image.hooks.repository }}:{{ .Values.image.hooks.tag }}"
          imagePullPolicy: {{ .Values.image.hooks.pullPolicy }}
          command:
            - /bin/bash
            - -c
          args:
            - |

              echo "{{ template "goquorum-node.fullname" . }} Pre Delete hook ..."

              function delete_node_from_tessera_peers_configmap {
                kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o json
                # if there is no configmap, do nothing
                if [ $? -ne 0 ]; then
                  echo "No tessera-peers found, nothing to do..."
                # delete the one 
                else
                  echo "tessera-peers found, deleting {{ template "goquorum-node.fullname" . }}..."
                  echo $(kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o jsonpath='{.data.tesseraPeers}' ) > /tmp/tessera-peers.raw
                  cat /tmp/tessera-peers.raw | jq --arg NEEDLE "{{ template "goquorum-node.fullname" . }}" 'del(.[] | select( .url | contains($NEEDLE) ))' > /tmp/tessera-peers
                  kubectl -n {{ .Release.Namespace }} create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers -o yaml --dry-run=client | kubectl replace -f -
                fi
              }

              function delete_node_from_enodes_configmap {
                kubectl -n {{ .Release.Namespace }}  get configmap goquorum-node-enodes -o json
                # if there is no configmap, do nothing
                if [ $? -ne 0 ]; then
                  echo "No peers found, nothing to do..."
                # delete the one 
                else    
                  echo "goquorum-node-enodes found, deleting {{ template "goquorum-node.fullname" . }}..."
                  echo $(kubectl -n {{ .Release.Namespace }} get configmap goquorum-node-enodes -o jsonpath='{.data.static-nodes\.json}' ) > /tmp/static-nodes.json.raw
                  cat /tmp/static-nodes.json.raw | jq --arg NEEDLE "{{ template "goquorum-node.fullname" . }}" 'del(.[] | select( . | contains($NEEDLE) ))' > /tmp/static-nodes.json
                  kubectl -n {{ .Release.Namespace }} create configmap goquorum-node-enodes --from-file=static-nodes.json=/tmp/static-nodes.json -o yaml --dry-run=client | kubectl replace -f -
                fi
              }

              delete_node_from_enodes_configmap
              delete_node_from_tessera_peers_configmap

            {{- if .Values.nodeFlags.removeKeysOnDeletion }}
              echo "Deleting node secrets in k8s ..."
              kubectl delete secret {{ template "goquorum-node.fullname" . }}-keys --namespace {{ .Release.Namespace }}
              kubectl delete secret {{ template "goquorum-node.fullname" . }}-account --namespace {{ .Release.Namespace }}
              kubectl delete configmap {{ template "goquorum-node.fullname" . }}-address --namespace {{ .Release.Namespace }}

            {{- if .Values.nodeFlags.privacy }}
              kubectl delete secret {{ template "goquorum-node.fullname" . }}-tessera-keys --namespace {{ .Release.Namespace }}
            {{- end }}

            {{- end }}       

              echo "Completed"

