
{{- if eq .Values.provider "azure" }}
# only needs to be done in azure because of the way the identies work
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "goquorum-genesis.name" . }}-sa
  namespace: {{ .Release.Namespace }}

{{- end}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "goquorum-genesis.name" . }}-role
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "goquorum-genesis.name" . }}
    helm.sh/chart: {{ include "goquorum-genesis.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [""]
    resources: ["secrets", "configmaps"]
    verbs: ["create", "get", "list", "update", "delete" ]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch" ]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "goquorum-genesis.name" . }}-rb
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "goquorum-genesis.name" . }}-role
subjects:
  - kind: ServiceAccount
    namespace: {{ .Release.Namespace }}
{{- if eq .Values.provider "azure" }}
    name: {{ include "goquorum-genesis.name" . }}-sa
{{- else }}
    name: {{ .Values.aws.serviceAccountName }}
{{- end}}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "goquorum-genesis.name" . }}-init
  labels:
{{- if eq .Values.provider "azure" }}
    aadpodidbinding: "{{ .Values.azure.identityName }}"
{{- end }}
    app: {{ template "goquorum-genesis.name" . }}
    chart: {{ template "goquorum-genesis.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    namespace: {{ .Release.Namespace }}
    app.kubernetes.io/name: {{ include "goquorum-genesis.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "goquorum-genesis.chart" . }}
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook-delete-policy: "hook-succeeded"
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
{{- if eq .Values.provider "azure" }}
        aadpodidbinding: "{{ .Values.azure.identityName }}"
{{- end}}
        app.kubernetes.io/name: {{ include "goquorum-genesis.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
{{- if eq .Values.provider "azure" }}
      serviceAccountName: {{ include "goquorum-genesis.name" . }}-sa
{{- else }}
      serviceAccountName: {{ .Values.aws.serviceAccountName }}
{{- end}}
      restartPolicy: "Never"
      containers:
        - name: generate-genesis
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          securityContext:
            runAsUser: 0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
          args:
            - |

{{- if eq .Values.provider "azure" }}

              function safeWriteSecret {
                key=$1
                fpath=$2
                az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  az keyvault secret set --vault-name {{ .Values.azure.keyvaultName }} --name $key --file $fpath --encoding utf-8
                else
                  # if the key exists pull it from keyvault so that when you update the enodes configmap, you have the right value
                  az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key | jq -r '.value' > $fpath
                fi
              }

              az login --identity --debug
              az account set --subscription {{ .Values.azure.subscriptionId }}
{{- else }}

              function safeWriteSecret {
                key=$1
                fpath=$2
                aws secretsmanager describe-secret --secret-id $key > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  aws secretsmanager create-secret --name $key --description $key --secret-string file://$fpath
                else
                  # if the key exists pull it from keyvault so that when you update the enodes configmap, you have the right value
                  aws secretsmanager get-secret-value --secret-id $key | jq -r '.SecretString' > $fpath
                fi
              }
{{- end}}
              function safeWriteGenesisConfigmap {
                FOLDER_PATH=$1
                kubectl get configmap --namespace {{ .Release.Namespace }} goquorum-genesis
                if [ $? -ne 0 ]; then
                  kubectl create configmap --namespace {{ .Release.Namespace }} goquorum-genesis --from-file=genesis.json=$FOLDER_PATH/goQuorum/genesis.json
                fi
              }

              function safeWriteEnodesConfigmap {
                kubectl get configmap --namespace {{ .Release.Namespace }} goquorum-node-enodes
                if [ $? -ne 0 ]; then
                  kubectl create configmap --namespace {{ .Release.Namespace }} goquorum-node-enodes --from-file=static-nodes.json=/generated-config/static-nodes.json
                fi
              }

              echo "Creating config ..."
              {{ if hasKey .Values.rawGenesisConfig.genesis.config "qbft" }}
              FOLDER_PATH=$(npx --yes --quiet quorum-genesis-tool@latest --consensus qbft {{ if .Values.rawGenesisConfig.blockchain.nodes.generate }} --validators {{ .Values.rawGenesisConfig.blockchain.nodes.count }} {{ else }} --validators 0 {{ end }} --members 0 --bootnodes 0 --chainID {{ .Values.rawGenesisConfig.genesis.config.chainId }} --blockperiod {{ .Values.rawGenesisConfig.genesis.config.qbft.blockperiodseconds }} --epochLength {{ .Values.rawGenesisConfig.genesis.config.qbft.epochlength }} --requestTimeout {{ .Values.rawGenesisConfig.genesis.config.qbft.requesttimeoutseconds }} --difficulty {{ .Values.rawGenesisConfig.genesis.difficulty }} --gasLimit {{ .Values.rawGenesisConfig.genesis.gasLimit }} --coinbase {{ .Values.rawGenesisConfig.genesis.coinbase }} --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")
              {{ else if hasKey .Values.rawGenesisConfig.genesis.config "clique" }}
              FOLDER_PATH=$(npx --yes --quiet quorum-genesis-tool@latest --consensus clique {{ if .Values.rawGenesisConfig.blockchain.nodes.generate }} --validators {{ .Values.rawGenesisConfig.blockchain.nodes.count }} {{ else }} --validators 0 {{ end }} --members 0 --bootnodes 0 --chainID {{ .Values.rawGenesisConfig.genesis.config.chainId }} --blockperiod {{ .Values.rawGenesisConfig.genesis.config.clique.blockperiodseconds }} --epochLength {{ .Values.rawGenesisConfig.genesis.config.clique.epochlength }} --requestTimeout {{ .Values.rawGenesisConfig.genesis.config.clique.requesttimeoutseconds }} --difficulty {{ .Values.rawGenesisConfig.genesis.difficulty }} --gasLimit {{ .Values.rawGenesisConfig.genesis.gasLimit }} --coinbase {{ .Values.rawGenesisConfig.genesis.coinbase }} --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")
              {{ else if hasKey .Values.rawGenesisConfig.genesis.config "raft" }}
              FOLDER_PATH=$(npx --yes --quiet quorum-genesis-tool@latest --consensus raft {{ if .Values.rawGenesisConfig.blockchain.nodes.generate }} --validators {{ .Values.rawGenesisConfig.blockchain.nodes.count }} {{ else }} --validators 0 {{ end }} --members 0 --bootnodes 0 --chainID {{ .Values.rawGenesisConfig.genesis.config.chainId }} --blockperiod {{ .Values.rawGenesisConfig.genesis.config.raft.blockperiodseconds }} --epochLength {{ .Values.rawGenesisConfig.genesis.config.raft.epochlength }} --requestTimeout {{ .Values.rawGenesisConfig.genesis.config.raft.requesttimeoutseconds }} --difficulty {{ .Values.rawGenesisConfig.genesis.difficulty }} --gasLimit {{ .Values.rawGenesisConfig.genesis.gasLimit }} --coinbase {{ .Values.rawGenesisConfig.genesis.coinbase }} --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")
              {{ else if hasKey .Values.rawGenesisConfig.genesis.config "ibft" }}
              FOLDER_PATH=$(npx --yes --quiet quorum-genesis-tool@latest --consensus ibft {{ if .Values.rawGenesisConfig.blockchain.nodes.generate }} --validators {{ .Values.rawGenesisConfig.blockchain.nodes.count }} {{ else }} --validators 0 {{ end }} --members 0 --bootnodes 0 --chainID {{ .Values.rawGenesisConfig.genesis.config.chainId }} --blockperiod {{ .Values.rawGenesisConfig.genesis.config.ibft.blockperiodseconds }} --epochLength {{ .Values.rawGenesisConfig.genesis.config.ibft.epochlength }} --requestTimeout {{ .Values.rawGenesisConfig.genesis.config.ibft.requesttimeoutseconds }} --difficulty {{ .Values.rawGenesisConfig.genesis.difficulty }} --gasLimit {{ .Values.rawGenesisConfig.genesis.gasLimit }} --coinbase {{ .Values.rawGenesisConfig.genesis.coinbase }} --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")
              {{ else }}
              FOLDER_PATH=$(npx --yes --quiet quorum-genesis-tool@latest --consensus qbft {{ if .Values.rawGenesisConfig.blockchain.nodes.generate }} --validators {{ .Values.rawGenesisConfig.blockchain.nodes.count }} {{ else }} --validators 0 {{ end }} --members 0 --bootnodes 0 --chainID {{ .Values.rawGenesisConfig.genesis.config.chainId }} --blockperiod {{ .Values.rawGenesisConfig.genesis.config.qbft.blockperiodseconds }} --epochLength {{ .Values.rawGenesisConfig.genesis.config.qbft.epochlength }} --requestTimeout {{ .Values.rawGenesisConfig.genesis.config.qbft.requesttimeoutseconds }} --difficulty {{ .Values.rawGenesisConfig.genesis.difficulty }} --gasLimit {{ .Values.rawGenesisConfig.genesis.gasLimit }} --coinbase {{ .Values.rawGenesisConfig.genesis.coinbase }} --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")
              {{ end }}
              echo $FOLDER_PATH
              echo "Creating genesis configmap ..."
              safeWriteGenesisConfigmap $FOLDER_PATH

              # create the static-nodes with proper dns names for the quorum nodes
              echo "[" > /generated-config/static-nodes.json

              # 0 index so setting this to the num of validators
              echo "Creating validator keys ..."
              i=1
              for f in $(find $FOLDER_PATH -type d -iname "validator*" -exec basename {} \;); do
                if [ -d $FOLDER_PATH/${f} ]; then
                  echo $f

                  echo "Creating keys in vault for $validatorKey ..."
                  safeWriteSecret goquorum-node-$validatorKey-nodekey $FOLDER_PATH/${f}/nodekey
                  safeWriteSecret goquorum-node-$validatorKey-nodekeypub $FOLDER_PATH/${f}/nodekey.pub 
                  safeWriteSecret goquorum-node-$validatorKey-enode $FOLDER_PATH/${f}/nodekey.pub 
                  kubectl create configmap goquorum-node-validator-${i}-address --from-file=address=$FOLDER_PATH/${f}/address


                  # add to the static-nodes
                  pubkey=$(cat $FOLDER_PATH/${f}/nodekey.pub)
                  echo ",\"enode://$pubkey@goquorum-node-$validatorKey-0.goquorum-node-$validatorKey.{{ .Release.Namespace }}.svc.cluster.local:30303?discport=0\"" >> /generated-config/static-nodes.json
                fi
              done

              echo "]" >> /generated-config/static-nodes.json
              # remove the extra comma to make it valid json
              sed -i '0,/,/s///' /generated-config/static-nodes.json
              echo "Creating enodes configmap ..."
              safeWriteEnodesConfigmap

              echo "Completed"
