---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "besu-node.fullname" . }}-pre-install-hook
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": "hook-succeeded"
  labels:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
    azure.workload.identity/use: "true"
{{- end }}
    app.kubernetes.io/name: pre-install-hook
    app.kubernetes.io/component: job
    app.kubernetes.io/part-of: {{ include "besu-node.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
spec:
  backoffLimit: 1
  completions: 1
  template:
    metadata:
      labels:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
        azure.workload.identity/use: "true"
{{- end }}
        app.kubernetes.io/name: pre-install-hook
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
      serviceAccountName: {{ .Values.azure.serviceAccountName }}
{{- else if and (eq .Values.cluster.provider "aws") (.Values.cluster.cloudNativeServices) }}
      serviceAccountName: {{ .Values.aws.serviceAccountName }}
{{- else }}
      serviceAccountName: {{ include "besu-node.fullname" . }}-sa
{{- end }}
      restartPolicy: "OnFailure"
      containers:
        - name: {{ template "besu-node.fullname" . }}-pre-start-hook
          image: {{ .Values.image.hooks.repository }}:{{ .Values.image.hooks.tag }}
          imagePullPolicy: {{ .Values.image.besu.pullPolicy }}
          securityContext:
            runAsUser: 0
          command:
            - /bin/bash
            - -c
          args:
            - |

              function update_peers_configmap {
                PUBKEY_LOC=$1
                kubectl -n {{ .Release.Namespace }} get configmap besu-peers -o json
                if [ $? -ne 0 ]; then
                  echo "[]" > /tmp/static-nodes.json.raw
                else
                  echo $(kubectl -n {{ .Release.Namespace }} get configmap besu-peers -o jsonpath='{.data.static-nodes\.json}' ) > /tmp/static-nodes.json.raw
                fi
                # update the entries
                echo "updating besu-peers..."
                pubkey=$(cat $PUBKEY_LOC )
                NEEDLE="enode://$pubkey@{{ template "besu-node.fullname" . }}-0.{{ template "besu-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:30303?discport=0"
                cat /tmp/static-nodes.json.raw | jq --arg NEEDLE "$NEEDLE" '. += [ $NEEDLE ] | unique ' > /tmp/static-nodes.json
                kubectl -n {{ .Release.Namespace }} create configmap besu-peers --from-file=static-nodes.json=/tmp/static-nodes.json -o yaml --dry-run=client | kubectl replace -f -
              }

              function update_tessera_peers_configmap {
                kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o json
                # first time a tx node is deployed and there is no configmap
                if [ $? -ne 0 ]; then
                  echo "No tessera-peers found, creating a new one..."
                  echo "[{ \"url\": \"http://{{ template "besu-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:9000\" }]"  > /tmp/tessera-peers
                  kubectl --namespace {{ .Release.Namespace }} create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers

                # update the entries
                else
                  echo "Tessera-peers found, updating existing..."
                  echo $(kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o jsonpath='{.data.tesseraPeers}' ) > /tmp/tessera-peers.raw
                  NEEDLE="http://{{ template "besu-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:9000"
                  cat /tmp/tessera-peers.raw | jq --arg NEEDLE "$NEEDLE" '. += [{"url": $NEEDLE}] | unique ' > /tmp/tessera-peers
                  kubectl -n {{ .Release.Namespace }} create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers -o yaml --dry-run=client | kubectl replace -f -
                fi
              }

              function update_bootnodes_configmap {
                PUBKEY_LOC=$1
                kubectl -n {{ .Release.Namespace }} get configmap besu-bootnodes -o json
                if [ $? -ne 0 ]; then
                  echo "[]" > /tmp/besu-bootnodes-json.raw
                  kubectl -n {{ .Release.Namespace }} create configmap besu-bootnodes --from-file=bootnodes-json=/tmp/besu-bootnodes-json.raw --from-literal=bootnodes-string=""
                fi

                echo "updating besu-bootnodes..."
                echo $(kubectl -n {{ .Release.Namespace }} get configmap besu-bootnodes -o jsonpath='{.data.bootnodes-json}' ) > /tmp/besu-bootnodes-json.raw
                pubkey=$(cat $PUBKEY_LOC )
                NEEDLE="enode://$pubkey@{{ template "besu-node.fullname" . }}-0.{{ template "besu-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:30303"
                cat /tmp/besu-bootnodes-json.raw | jq --arg NEEDLE "$NEEDLE" '. += [ $NEEDLE ] | unique ' > /tmp/besu-bootnodes-json
                cat /tmp/besu-bootnodes-json | jq -r -c '. | join(",")' | tr -d '\n' > /tmp/besu-bootnodes-string
                kubectl -n {{ .Release.Namespace }} create configmap besu-bootnodes --from-file=bootnodes-json=/tmp/besu-bootnodes-json --from-file=bootnodes-string=/tmp/besu-bootnodes-string -o yaml --dry-run=client | kubectl replace -f -
              }


{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
              function safeWriteSecret {
                key=$1
                fpath=$2
                az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  az keyvault secret set --vault-name {{ .Values.azure.keyvaultName }} --name $key --file $fpath --encoding utf-8
                else
                  # if the key exists pull it from keyvault so that when you update the enodes configmap, you have the right value
                  az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key | jq -r '.value' > $fpath
                fi
              }

              az login --identity --debug
              az account set --subscription {{ .Values.azure.subscriptionId }}

{{- else if and (eq .Values.cluster.provider "aws") (.Values.cluster.cloudNativeServices) }}
              function safeWriteSecret {
                key=$1
                fpath=$2
                aws secretsmanager describe-secret --secret-id $key > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  aws secretsmanager create-secret --name $key --description $key --secret-string file://$fpath
                else
                  # if the key exists pull it from keyvault so that when you update the enodes configmap, you have the right value
                  aws secretsmanager get-secret-value --secret-id $key | jq -r '.SecretString' > $fpath
                fi
              }
{{- else }}

              function safeWriteSecret {
                key=$1
                fpath=$2
                kubectl get secret ${key}-keys --namespace {{ .Release.Namespace }} -o json > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  kubectl create secret generic ${key}-keys --namespace {{ .Release.Namespace }} --from-file=nodekey=${fpath}/nodekey --from-file=nodekey.pub=${fpath}/nodekey.pub --from-file=enode=${fpath}/nodekey.pub --from-file=accountPrivate.key=${fpath}/accountPrivateKey --from-file=accountPassword=${fpath}/accountPassword --from-file=accountKeystore=${fpath}/accountKeystore --from-file=accountAdddress=${fpath}/accountAddress
                else
                  # if the key exists pull it from secrets so that when you update the enodes configmap, you have the right value
                  kubectl get secrets ${key}-keys --namespace {{ .Release.Namespace }}  -o json | jq '.data.enode' | tr -d '"'| base64 --decode > /tmp/enode
                fi

                kubectl get secret ${key}-tessera-keys --namespace {{ .Release.Namespace }} -o json > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  kubectl create secret generic {{ template "besu-node.fullname" . }}-tessera-keys --namespace {{ .Release.Namespace }} --from-file=tm.key=$FOLDER_PATH/member0/tessera.key --from-file=tm.pub=$FOLDER_PATH/member0/tessera.pub --from-file=tm.password=$FOLDER_PATH/member0/passwordFile.txt
                fi
              }
{{- end }}

              echo "{{ template "besu-node.fullname" . }} hook ..."
              echo "Nodekey generation ..."
              FOLDER_PATH=$(quorum-genesis-tool --validators 0 --members 1 --bootnodes 0 {{ if .Values.node.besu.account.password }} --accountPassword {{ .Values.node.besu.account.password }} {{ end }} --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")
              echo "Creating {{ template "besu-node.fullname" . }} secrets in k8s ..."

{{- if .Values.cluster.cloudNativeServices }}
              echo "Creating keys in vault for {{ template "besu-node.fullname" . }} ..."
              safeWriteSecret {{ template "besu-node.fullname" . }}-nodekey $FOLDER_PATH/member0/nodekey
              safeWriteSecret {{ template "besu-node.fullname" . }}-nodekeypub $FOLDER_PATH/member0/nodekey.pub
              safeWriteSecret {{ template "besu-node.fullname" . }}-enode $FOLDER_PATH/member0/nodekey.pub
              safeWriteSecret {{ template "besu-node.fullname" . }}-address $FOLDER_PATH/member0/address
              safeWriteSecret {{ template "besu-node.fullname" . }}-accountPrivateKey $FOLDER_PATH/member0/accountPrivateKey
              safeWriteSecret {{ template "besu-node.fullname" . }}-accountPassword $FOLDER_PATH/member0/accountPassword
              safeWriteSecret {{ template "besu-node.fullname" . }}-accountKeystore $FOLDER_PATH/member0/accountKeystore
              safeWriteSecret {{ template "besu-node.fullname" . }}-accountAddress $FOLDER_PATH/member0/accountAddress
{{- else }}
              safeWriteSecret {{ template "besu-node.fullname" . }} $FOLDER_PATH/member0
{{- end }}
              cat $FOLDER_PATH/member0/nodekey.pub > /tmp/enode
              echo "Creating configmap for node address"
              kubectl create configmap {{ template "besu-node.fullname" . }}-address --from-file=address=$FOLDER_PATH/${f}/member0/address

              update_peers_configmap /tmp/enode
{{- if .Values.quorumFlags.isBootnode }}
              update_bootnodes_configmap /tmp/enode
{{- end }}
              echo "Completed"

{{- if .Values.quorumFlags.privacy }}
              FOLDER_PATH=$(quorum-genesis-tool --validators 0 --members 1 --bootnodes 0 --tesseraEnabled true --tesseraPassword {{ .Values.node.tessera.password }} --outputPath /tmp/tessera | tail -1 | sed -e "s/^Artifacts in folder: //")
              if [ ! -f "$FOLDER_PATH/member0/passwordFile.txt" ]; then
                echo "" > $FOLDER_PATH/member0/passwordFile.txt
              fi
              echo "Creating {{ template "besu-node.fullname" . }}-tessera-keys secrets in k8s ..."
{{- if .Values.cluster.cloudNativeServices }}
              safeWriteSecret {{ template "besu-node.fullname" . }}-tmkey $FOLDER_PATH/member0/tessera.key
              safeWriteSecret {{ template "besu-node.fullname" . }}-tmkeypub $FOLDER_PATH/member0/tessera.pub
              safeWriteSecret {{ template "besu-node.fullname" . }}-tmpassword $FOLDER_PATH/member0/passwordFile.txt
{{- else }}
              safeWriteSecret {{ template "besu-node.fullname" . }} $FOLDER_PATH/member0
{{- end }}
              update_tessera_peers_configmap
              echo "Tessera Completed"
{{- end }}
              echo "hook completed"
