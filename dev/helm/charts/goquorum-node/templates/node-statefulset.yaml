---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "goquorum-node.fullname" . }}-sa
  namespace: {{ .Release.Namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "goquorum-node.fullname" . }}-role
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "goquorum-node.fullname" . }}-rb
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "goquorum-node.fullname" . }}-role
subjects:
- kind: ServiceAccount
  name: {{ include "goquorum-node.fullname" . }}-sa
  namespace:  {{ .Release.Namespace }}

{{- if eq .Values.provider "azure" }}

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ include "goquorum-node.fullname" . }}-storage
  namespace: {{ .Release.Namespace }}
provisioner: kubernetes.io/azure-file
reclaimPolicy: Retain
allowVolumeExpansion: true
mountOptions:
  - dir_mode=0755
  - file_mode=0755
  - uid=0
  - gid=0
  - mfsymlinks
parameters:
  skuName: Standard_LRS

{{- else if eq .Values.provider "aws" }}

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ include "goquorum-node.fullname" . }}-storage
  namespace: {{ .Release.Namespace }}
provisioner: ebs.csi.aws.com
reclaimPolicy: Retain
allowVolumeExpansion: true
parameters:
  type: gp3
  fsType: ext4

# ---
# apiVersion: storage.k8s.io/v1
# kind: StorageClass
# metadata:
#   name: {{ include "besu-node.fullname" . }}-storage
#   namespace: {{ .Release.Namespace }}
# provisioner: efs.csi.aws.com
# reclaimPolicy: Retain
# parameters:
#   provisioningMode: efs-ap
#   fileSystemId: #your_file_system_id
#   directoryPerms: "700"
#   gidRangeStart: "1000" # optional
#   gidRangeEnd: "2000" # optional
#   basePath: "/dynamic_provisioning" # optional

{{- else }}

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ include "goquorum-node.fullname" . }}-storage
  namespace: {{ .Release.Namespace }}
  labels:
    type: local
spec:
  storageClassName: {{ include "goquorum-node.fullname" . }}-storage
  capacity:
    storage: "{{ .Values.storage.sizeLimit }}"
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/{{ include "goquorum-node.fullname" . }}"

{{- end }}

{{- if eq .Values.provider "local" }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name:  {{ include "goquorum-node.fullname" . }}-pvc
  namespace: {{ .Release.Namespace }}
spec:
  storageClassName: {{ include "goquorum-node.fullname" . }}-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "{{ .Values.storage.pvcSizeLimit }}"
{{- end }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "goquorum-node.fullname" . }}
  labels:
    app: {{ template "goquorum-node.name" . }}
    chart: {{ template "goquorum-node.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    namespace: {{ .Release.Namespace }}
    component: {{ .Release.Name }}
    app.kubernetes.io/name: {{ include "goquorum-node.fullname" . }}
    helm.sh/chart: {{ include "goquorum-node.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "goquorum-node.fullname" . }}
      release: {{ .Release.Name }}
      component: {{ .Release.Name }}
      app.kubernetes.io/name: {{ include "goquorum-node.fullname" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  serviceName: {{ include "goquorum-node.fullname" . }}
  {{- if or (eq .Values.provider "aws") (eq .Values.provider "azure") }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ include "goquorum-node.fullname" . }}-storage
      resources:
        requests:
          storage: "{{ .Values.storage.pvcSizeLimit }}"
  {{- end }}
  template:
    metadata:
      labels:
        app: {{ include "goquorum-node.fullname" . }}
        release: {{ .Release.Name }}
        component: {{ .Release.Name }}
        app.kubernetes.io/name: {{ include "goquorum-node.fullname" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: {{ .Release.Name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.node.goquorum.metrics.pprofport | quote}}
        prometheus.io/path: "/debug/metrics/prometheus"
    spec:
      serviceAccountName: {{ include "goquorum-node.fullname" . }}-sa
      containers:

      {{- if .Values.nodeFlags.privacy }}
      - name: {{ include "goquorum-node.fullname" . }}-tessera
        image: {{ .Values.image.tessera.repository }}:{{ .Values.image.tessera.tag }}
        imagePullPolicy: {{ .Values.image.tessera.imagePullPolicy }}
        resources:
          requests:
            cpu: "{{ .Values.node.tessera.resources.cpuRequest }}"
            memory: "{{ .Values.node.tessera.resources.memRequest }}"
          limits:
            cpu: "{{ .Values.node.tessera.resources.cpuLimit }}"
            memory: "{{ .Values.node.tessera.resources.memLimit }}"
        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: TESSERA_CONFIG_TYPE
            value: "-09"

        volumeMounts:
          - name: tessera-keys
            mountPath: {{ .Values.node.tessera.keysPath }}
            readOnly: true
          - name: data
            mountPath: {{ .Values.node.tessera.dataPath }}
          - name: tessera-peers
            mountPath: /config/tessera-peers
        ports:
          - name: tessera
            containerPort: {{ .Values.node.tessera.port }}
            protocol: TCP
          - name: tessera-tp
            containerPort: {{ .Values.node.tessera.tpport }}
            protocol: TCP
          - name: tessera-q2t
            containerPort: {{ .Values.node.tessera.q2tport }}
            protocol: TCP
        command:
          - /bin/sh
          - -c
        args:
          - |
            exec

            cp {{ .Values.node.tessera.keysPath }}/tm.* {{ .Values.node.tessera.dataPath }}/ ;

                cat <<EOF > {{ .Values.node.tessera.dataPath }}/tessera-config-09.json
                {
                  "useWhiteList": false,
                  "jdbc": {
                    "username": "sa",
                    "password": "",
                    "url": "jdbc:h2:{{ .Values.node.tessera.dataPath }}/tm/db;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=0",
                    "autoCreateTables": true
                  },
                  "serverConfigs":[
                  {
                    "app":"ThirdParty",
                    "enabled": true,
                    "serverAddress": "http://{{ include "goquorum-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.node.tessera.tpport }}",
                    "communicationType" : "REST"
                  },
                  {
                    "app":"Q2T",
                    "enabled": true,
                    "serverAddress": "http://{{ include "goquorum-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.node.tessera.q2tport }}",
                    "sslConfig": {
                      "tls": "OFF"
                    },
                    "communicationType" : "REST"
                  },
                  {
                    "app":"P2P",
                    "enabled": true,
                    "serverAddress": "http://{{ include "goquorum-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.node.tessera.port }}",
                    "sslConfig": {
                      "tls": "OFF"
                    },
                    "communicationType" : "REST"
                  }
                  ],
                  "peer": $$(cat /config/tessera-peers/tesseraPeers),
                  "keys": {
                  {{ if .Values.node.tessera.password }}
                    "passwordFile": "/keys/passwordFile.txt",
                  {{ end }}
                    "keyData": [
                      {
                        "privateKeyPath": "/keys/tm.key",
                        "publicKeyPath": "/keys/tm.pub"
                      }
                    ]
                  },
                  "alwaysSendTo": []
                }
            EOF

                cat {{ .Values.node.tessera.dataPath }}/tessera-config-09.json
                /tessera/bin/tessera -configfile {{ .Values.node.tessera.dataPath }}/tessera-config-09.json

      {{- end }}

      - name: {{ include "goquorum-node.fullname" . }}-quorum
        image: {{ .Values.image.goquorum.repository }}:{{ .Values.image.goquorum.tag }}
        imagePullPolicy: {{ .Values.image.goquorum.imagePullPolicy }}
        resources:
          requests:
            cpu: "{{ .Values.node.goquorum.resources.cpuRequest }}"
            memory: "{{ .Values.node.goquorum.resources.memRequest }}"
          limits:
            cpu: "{{ .Values.node.goquorum.resources.cpuLimit }}"
            memory: "{{ .Values.node.goquorum.resources.memLimit }}"
        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: QUORUM_NETWORK_ID
            value: "{{ .Values.node.goquorum.networkId }}"
          - name: QUORUM_CONSENSUS
            value: istanbul
        {{- if .Values.nodeFlags.privacy }}
          - name: QUORUM_PTM_URL
            value: "http://{{ include "goquorum-node.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.node.tessera.q2tport }}"
        {{ else }}
          - name: PRIVATE_CONFIG
            value: "ignore"
        {{- end }}
        volumeMounts:
        {{- if .Values.nodeFlags.privacy }}
          - name: tessera-keys
            mountPath: {{ .Values.node.goquorum.privacy.pubkeysPath }}
            readOnly: true
        {{- end}}
          - name: quorum-keys
            mountPath: {{ .Values.node.goquorum.keysPath }}
            readOnly: true
          - name: genesis
            mountPath: /etc/genesis
            readOnly: true
          - name: static-nodes
            mountPath: /config/static
            readOnly: true
          - name: data
            mountPath: {{ .Values.node.goquorum.dataPath }}
        ports:
          - name: json-rpc
            containerPort: {{ .Values.node.goquorum.rpc.port }}
            protocol: TCP
          - name: ws
            containerPort: {{ .Values.node.goquorum.ws.port }}
            protocol: TCP
          - name: graphql
            containerPort: {{ .Values.node.goquorum.graphql.port }}
            protocol: TCP
          - name: rlpx
            containerPort: {{ .Values.node.goquorum.p2p.port }}
            protocol: TCP
          - name: discovery
            containerPort: {{ .Values.node.goquorum.p2p.port }}
            protocol: UDP
          - name: metrics
            containerPort: {{ .Values.node.goquorum.metrics.pprofport }}
            protocol: TCP
        command:
          - /bin/sh
          - -c
        args:
          - |
            exec

          {{- if .Values.nodeFlags.privacy }}
            until $(curl --output /dev/null --silent --head --fail http://localhost:9000/upcheck); do echo 'waiting for transaction manager to start...'; sleep 5; done;
            echo 'transaction manager is up';
          {{- end }}

            geth --datadir={{ .Values.node.goquorum.dataPath }} init {{ .Values.node.goquorum.genesisFilePath }}
            cp {{ .Values.node.goquorum.keysPath }}/nodekey {{ .Values.node.goquorum.dataPath }}/geth/nodekey
            cp /config/static/static-nodes.json {{ .Values.node.goquorum.dataPath }}/geth/static-nodes.json

            geth \
            --datadir {{ .Values.node.goquorum.dataPath }} \
            --nodiscover --ipcdisable \
            --nat extip:$POD_IP \
            --verbosity {{ .Values.node.goquorum.log.verbosity }} \
            --istanbul.blockperiod {{ .Values.node.goquorum.miner.blockPeriod }} --mine --miner.threads {{ .Values.node.goquorum.miner.threads }} --miner.gasprice 0 --emitcheckpoints \
            --syncmode full --nousb \
            --metrics --pprof --pprof.addr {{ .Values.node.goquorum.metrics.pprofaddr | quote }} --pprof.port {{ .Values.node.goquorum.metrics.pprofport }} \
            --networkid {{ .Values.node.goquorum.networkId }} \
            --port {{ .Values.node.goquorum.p2p.port }} \
          {{- if .Values.node.goquorum.rpc.enabled }}
            --http --http.addr {{ .Values.node.goquorum.rpc.addr }} --http.port {{ .Values.node.goquorum.rpc.port }} --http.corsdomain {{ .Values.node.goquorum.rpc.corsDomain | quote }} --http.vhosts {{ .Values.node.goquorum.rpc.vHosts | quote }} --http.api {{ .Values.node.goquorum.rpc.api | quote }} \
          {{- end }}
          {{- if .Values.node.goquorum.ws.enabled }}
            --ws --ws.addr {{ .Values.node.goquorum.ws.addr }} --ws.port {{ .Values.node.goquorum.ws.port }} --ws.origins {{ .Values.node.goquorum.ws.origins | quote }} --ws.api {{ .Values.node.goquorum.ws.api | quote }} \
          {{- end }}
          {{- if hasKey .Values.node.goquorum.account "unlock" }}
             --unlock {{ .Values.node.goquorum.account.unlock }} --allow-insecure-unlock --password {{ .Values.node.goquorum.account.password }} \
          {{- end }}

      volumes:
      - name: quorum-keys
        secret:
          secretName: {{ include "goquorum-node.fullname" . }}-keys
      - name: genesis
        configMap:
          name: goquorum-genesis
          items:
            - key: genesis.json
              path: genesis.json
      - name: static-nodes
        configMap:
          name: goquorum-node-enodes
          items:
            - key: static-nodes.json
              path: static-nodes.json
      {{- if eq .Values.provider "local"}}
      - name: data
        persistentVolumeClaim:
          claimName: {{ include "goquorum-node.fullname" . }}-pvc
      {{- end }}
      {{- if .Values.nodeFlags.privacy }}
      - name: tessera-keys
        secret:
          secretName: {{ include "goquorum-node.fullname" . }}-tessera-keys
      - name: tessera-peers
        configMap:
          name: tessera-peers
          items:
            - key: tesseraPeers
              path: tesseraPeers
      {{- end }}

