{{- if eq .Values.provider "azure" }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "besu-genesis.name" . }}-sa
  namespace: {{ .Release.Namespace }}
{{- end}}
---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "besu-genesis.name" . }}-role
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "besu-genesis.name" . }}
    helm.sh/chart: {{ include "besu-genesis.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [""]
    resources: ["secrets", "configmaps"]
    verbs: ["create", "get", "list", "update", "delete" ]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch" ]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "besu-genesis.name" . }}-rb
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "besu-genesis.name" . }}-role
subjects:
  - kind: ServiceAccount
    namespace: {{ .Release.Namespace }}
{{- if eq .Values.provider "azure" }}
    name: {{ include "besu-genesis.name" . }}-sa
{{- else }}
    name: {{ .Values.aws.serviceAccountName }}
{{- end}}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "besu-genesis.name" . }}-init
  labels:
{{- if eq .Values.provider "azure" }}
    aadpodidbinding: "{{ .Values.azure.identityName }}"
{{- end }}
    app: {{ template "besu-genesis.name" . }}
    chart: {{ template "besu-genesis.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    namespace: {{ .Release.Namespace }}
    app.kubernetes.io/name: {{ include "besu-genesis.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "besu-genesis.chart" . }}
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook-delete-policy: "hook-succeeded"
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
{{- if eq .Values.provider "azure" }}
        aadpodidbinding: "{{ .Values.azure.identityName }}"
{{- end }}
        app.kubernetes.io/name: {{ include "besu-genesis.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
{{- if eq .Values.provider "azure" }}
      serviceAccountName: {{ include "besu-genesis.name" . }}-sa
{{- else }}
      serviceAccountName: {{ .Values.aws.serviceAccountName }}
{{- end }}
      restartPolicy: "Never"
      containers:
        - name: generate-genesis
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          securityContext:
            runAsUser: 0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: raw-config
              mountPath: /raw-config
            - name: generated-config
              mountPath: /generated-config
          command:
            - /bin/bash
            - -c
          args:
            - |
{{- if eq .Values.provider "azure" }}
              function safeWriteSecret {
                key=$1
                fpath=$2
                az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                   az keyvault secret set --vault-name {{ .Values.azure.keyvaultName }} --name $key --file $fpath --encoding utf-8
                else
                  # if the key exists pull it from keyvault so that when you update the enodes configmap, you have the right value
                  az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key | jq -r '.value' > $fpath
                fi
              }
              az login --identity --debug
              az account set --subscription {{ .Values.azure.subscriptionId }}
{{- else }}
              function safeWriteSecret {
                key=$1
                fpath=$2
                aws secretsmanager describe-secret --secret-id $key > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  aws secretsmanager create-secret --name $key --description $key --secret-string file://$fpath
                else
                  # if the key exists pull it from keyvault so that when you update the enodes configmap, you have the right value
                  aws secretsmanager get-secret-value --secret-id $key | jq -r '.SecretString' > $fpath
                fi
              }
{{- end}}
              function writeK8sEnodeSecret {
                key=$1
                fpath=$2
                kubectl create secret generic $key --namespace {{ .Release.Namespace }} --from-file=$fpath
              }

              function safeWriteGenesisConfigmap {
                FOLDER_PATH=$1
                kubectl get configmap --namespace {{ .Release.Namespace }} besu-genesis
                if [ $? -ne 0 ]; then
                  kubectl create configmap --namespace {{ .Release.Namespace }} besu-genesis --from-file=genesis.json=$FOLDER_PATH/besu/genesis.json
                fi
              }

              echo "Creating config ..."
              FOLDER_PATH=$(npx --yes --quiet quorum-genesis-tool@latest --consensus {{ .Values.rawGenesisConfig.genesis.config.algorithm.consensus }} {{ if .Values.rawGenesisConfig.blockchain.nodes.generate }} --validators {{ .Values.rawGenesisConfig.blockchain.nodes.count }} {{ else }} --validators 0 {{ end }} --members 0 --bootnodes 2 --chainID {{ .Values.rawGenesisConfig.genesis.config.chainId }} --blockperiod {{ .Values.rawGenesisConfig.genesis.config.algorithm.blockperiodseconds }} --epochLength {{ .Values.rawGenesisConfig.genesis.config.algorithm.epochlength }} --requestTimeout {{ .Values.rawGenesisConfig.genesis.config.algorithm.requesttimeoutseconds }} --difficulty {{ .Values.rawGenesisConfig.genesis.difficulty }} --gasLimit {{ .Values.rawGenesisConfig.genesis.gasLimit }} --coinbase {{ .Values.rawGenesisConfig.genesis.coinbase }} --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")

              echo $FOLDER_PATH
              echo "Creating genesis configmap in k8s ..."
              safeWriteGenesisConfigmap $FOLDER_PATH

              # create the static-nodes with proper dns names for the quorum nodes
              echo "[" > /generated-config/static-nodes.json

              echo "Creating validator secrets in k8s ..."
              i=1
              for f in $(find $FOLDER_PATH -type d -iname "validator*" -exec basename {} \;); do
                if [ -d $FOLDER_PATH/${f} ]; then
                  echo $f

                  echo "Creating keys in vault for validator-${i} ..."
                  safeWriteSecret besu-node-validator-${i}-nodekey $FOLDER_PATH/${f}/nodekey
                  safeWriteSecret besu-node-validator-${i}-nodekeypub $FOLDER_PATH/${f}/nodekey.pub 
                  safeWriteSecret besu-node-validator-${i}-enode $FOLDER_PATH/${f}/nodekey.pub 
                  kubectl create configmap besu-node-validator-${i}-address --from-file=address=$FOLDER_PATH/${f}/address

                  # add to the static-nodes
                  pubkey=$(cat $FOLDER_PATH/${f}/nodekey.pub )
                  echo ",\"enode://$pubkey@besu-node-validator-$i-0.besu-node-validator-$i.{{ .Release.Namespace }}.svc.cluster.local:30303?discport=0\"" >> $FOLDER_PATH/static-nodes.json

                  i=$((i+1))
                fi
              done

              echo "Creating bootnode keys ..."
              i=1
              for j in $(find $FOLDER_PATH -type d -iname "bootnode*" -exec basename {} \;);
              do
                echo "Creating keys in vault for bootnode ${j} ..."
                safeWriteSecret besu-node-bootnode-${j}-nodekey $FOLDER_PATH/${j}/nodekey
                safeWriteSecret besu-node-bootnode-${j}-nodekeypub $FOLDER_PATH/${j}/nodekey.pub
                safeWriteSecret besu-node-bootnode-${j}-enode $FOLDER_PATH/${j}/nodekey.pub
                writeK8sEnodeSecret besu-node-bootnode-${j}-enode $FOLDER_PATH/${j}/nodekey.pub

                # add to the static-nodes
                pubkey=$(cat /tmp/enode )
                echo ",\"enode://$pubkey@besu-node-bootnode-$j-0.besu-node-bootnode-$j.{{ .Release.Namespace }}.svc.cluster.local:30303?discport=0\"" >> /generated-config/static-nodes.json

                i=$((i+1)
              done

              echo "]" >> /generated-config/static-nodes.json
              # remove the extra comma to make it valid json
              sed -i '0,/,/s///' /generated-config/static-nodes.json
              kubectl create configmap --namespace {{ .Release.Namespace }} besu-node-enodes  --from-file=static-nodes.json=/generated-config/static-nodes.json

              echo "Completed ..."

      volumes:
        - name: raw-config
          configMap:
            name: {{ include "besu-genesis.fullname" . }}-raw-json-config
        - name: generated-config
          emptyDir: {}
