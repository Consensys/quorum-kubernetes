---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "besu-genesis.name" . }}-cleanup
  labels:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudSecretsStore) }}
    aadpodidbinding: "{{ .Values.azure.identityName }}"
{{- end }}  
    app: {{ template "besu-genesis.name" . }}
    chart: {{ template "besu-genesis.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    namespace: {{ .Release.Namespace }}
    app.kubernetes.io/name: {{ include "besu-genesis.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "besu-genesis.chart" . }}
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook-weight: "0"
    helm.sh/hook: "pre-delete"
    helm.sh/hook-delete-policy: "hook-succeeded"
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudSecretsStore) }}
        aadpodidbinding: "{{ .Values.azure.identityName }}"
{{- end}}         
        app.kubernetes.io/name: {{ include "besu-genesis.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
{{- if and (eq .Values.cluster.provider "aws") (.Values.cluster.cloudSecretsStore) }}
      serviceAccountName: {{ .Values.aws.serviceAccountName }}
{{- else }}
      serviceAccountName: {{ include "besu-genesis.name" . }}-sa
{{- end }}        
      restartPolicy: "Never"
      containers:
        - name: delete-genesis
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          securityContext:
            runAsUser: 0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
          args:
            - |

{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudSecretsStore) }}

              function deleteSecret {
                key=$1
                fpath=$2
                az keyvault secret show --vault-name {{ .Values.azure.keyvaultName }} --name $key > /dev/null 2>&1
                if [ $? -eq 0 ]; then
                  az keyvault secret delete --vault-name {{ .Values.azure.keyvaultName }} --name $key
                fi
              }

              az login --identity --debug
              az account set --subscription {{ .Values.azure.subscriptionId }}

{{- else if and (eq .Values.cluster.provider "aws") (.Values.cluster.cloudSecretsStore) }}

              function deleteSecret {
                key=$1
                aws secretsmanager describe-secret --secret-id $key > /dev/null 2>&1
                if [ $? -eq 0 ]; then
                  aws secretsmanager delete-secret --secret-id $key --recovery-window-in-days 7
                fi
              }

{{- else }}

              function deleteSecret {
                key=$1
                kubectl delete secret ${key} --namespace {{ .Release.Namespace }} 
              }

{{- end }}


{{- if .Values.quorumFlags.removeGenesisOnDelete }}

              echo "Deleting genesis configmap in k8s ..."
              kubectl delete configmap --namespace {{ .Release.Namespace }} besu-genesis

              echo "Deleting node-enodes configmap in k8s ..."
              kubectl delete configmap --namespace {{ .Release.Namespace }} besu-node-enodes

              echo "Deleting validator addresses in k8s ..."
              for f in `seq 1 {{ .Values.rawGenesisConfig.blockchain.nodes.count }}`; do
                echo $f
                kubectl delete configmap besu-node-validator-${f}-address  --namespace {{ .Release.Namespace }}
              done

{{- end}} 

{{- if .Values.quorumFlags.removeKeysOnDelete }}

              echo "Deleting validator secrets in k8s ..."
              for f in `seq 1 {{ .Values.rawGenesisConfig.blockchain.nodes.count }}`; do
                echo $f

{{- if (eq .Values.cluster.cloudSecretsStore false) }}
                  
                  deleteSecret besu-node-validator-${f}-keys
                  deleteSecret besu-node-validator-${f}-account
{{- else }}
                  deleteSecret besu-node-validator-${f}-nodekey
                  deleteSecret besu-node-validator-${f}-nodekeypub
                  deleteSecret besu-node-validator-${f}-enode

                  deleteSecret besu-node-validator-${f}-accountPrivateKey
                  deleteSecret besu-node-validator-${f}-accountPassword
                  deleteSecret besu-node-validator-${f}-accountKeystore
                  deleteSecret besu-node-validator-${f}-accountAddress
{{- end }}
              done
              echo "Completed ..."

              echo "Deleting bootnode secrets in k8s ..."
              for f in `seq 1 {{ .Values.rawGenesisConfig.blockchain.bootnodes.count }}`; do
                echo $f

{{- if (eq .Values.cluster.cloudSecretsStore false) }}
                  
                  deleteSecret besu-node-bootnode-${f}-keys
                  deleteSecret besu-node-bootnode-${f}-account
{{- else }}
                  deleteSecret besu-node-bootnode-${f}-nodekey
                  deleteSecret besu-node-bootnode-${f}-nodekeypub
                  deleteSecret besu-node-bootnode-${f}-enode

                  deleteSecret besu-node-bootnode-${f}-accountPrivateKey
                  deleteSecret besu-node-bootnode-${f}-accountPassword
                  deleteSecret besu-node-bootnode-${f}-accountKeystore
                  deleteSecret besu-node-bootnode-${f}-accountAddress
{{- end }}

              done
              echo "Completed ..."
{{- end}} 
